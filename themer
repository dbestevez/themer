#!/bin/bash

DIR=`dirname $(readlink -f $0)`

# ---
# Displays the command help and an error message, if present.
#
# @param $1 An error message.
# ---
function help() {
    if [ "$*" != "" ] ; then
        echo -e "\E[31;7m$*\033[0m"
    fi

cat << EOF
Usage: themer [OPTION] THEME
Changes the wallpaper and current theme for bspwm, polybar and more.

Options:
  -c, --colors  The colors to use.
  -h, --help    Display this help and exit
  -l, --list    Display the list of available themes
  -r, --random  Applies a random theme
  -t, --theme   The theme to configure
EOF

    if [ "$*" != "" ] ; then
        exit 1
    fi

    exit 0
}

# ---
# Displays a list of available themes
# ---
function list() {
    local themes=$(ls $DIR/themes | tr "\n" " ")
    local colors=$(ls $DIR/colors | sed -e "s/\.sh//g"  | tr "\n" " ")

    echo -e "Themes\n   $themes"
    echo -e "Colors\n   $colors"

    exit 0
}

# ---
# Changes the current theme.
# ---
function main() {
    local colors=$(cat $DIR/last | grep colors | sed -e "s/colors:\s*//")
    local theme=$(cat $DIR/last | grep theme | sed -e "s/theme:\s*//")

    while [[ $# -gt 0 ]]; do
        case "$1" in
            -h | --help )
                help ;;

            -c | --colors )
                colors=$2
                shift
                ;;

            -l | --list )
                list
                ;;

            -r | --random )
                theme=$(random_theme)
                colors=$(random_colors)
                ;;

            -t | --theme )
                theme=$2
                shift
                ;;

            * )
                help "Unknown option '$1'"
                ;;
        esac

        shift;
    done

    # No theme to apply
    if [[ ! $theme ]] || [[ ! -d $DIR/themes/$theme ]]; then
        help "Unknown theme \"$theme\""
    fi

    if [ ! -f $DIR/colors/$colors.sh ]; then
        help "Unknown color scheme \"$colors\""
    fi

    echo "theme: $theme" > $DIR/last
    echo "colors: $colors" >> $DIR/last

    echo "Applying $theme theme with $colors colors..."

    source $DIR/colors/$colors.sh

    updateDunst     $theme
    updateCava      $theme
    updateKitty     $theme
    updateMutt      $theme
    updatePicom     $theme
    updatePolybar   $theme
    updateWaybar    $theme
    updateRofi      $theme
    updateZsh       $theme
    updateTmux      $theme
    updateVim       $theme
    updateBspwm     $theme
    updateHyprland  $theme
    updateWallpaper $theme $colors
}

# ---
# Returns a random color scheme.
# ---
function random_colors() {
    colors=$(ls colors | sed -e "s/\.sh//g")
    size=$(echo "$colors" | wc -w)

    i=0
    array=()
    for c in $colors; do
        array[$i]="$c"
        i=$(($i+1))
    done

    color=$(($RANDOM % $size))

    echo ${array[$color]}
}

# ---
# Returns a random theme.
# ---
function random_theme() {
    themes=$(ls themes)
    size=$(echo "$themes" | wc -w)

    i=0
    array=()
    for t in $themes; do
        array[$i]="$t"
        i=$(($i+1))
    done

    theme=$(($RANDOM % $size))

    echo ${array[$theme]}
}

# ---
# Updates the bspwm configuration.
#
# @param $1 The theme name.
# ---
function updateBspwm() {
    command -v bspwm > /dev/null 2>&1 || return

    echo -en "  Changing bspwm theme........................"

    [ -f $HOME/.config/bspwm/theme ] && rm $HOME/.config/bspwm/theme

    if  [[ ! -f $DIR/themes/$1/bspwm/config ]]; then
        echo -e "\E[1;33mSKIP\033[0m"
        return
    fi

    mkdir -p $HOME/.config/bspwm
    envsubst < $DIR/themes/$1/bspwm/config > $HOME/.config/bspwm/theme
    source $HOME/.config/bspwm/theme

    echo -e "\E[1;32mDONE\033[0m"
}

# ---
# Updates the dunst configuration.
#
# @param $1 The theme name.
# ---
function updateCava() {
    command -v cava > /dev/null 2>&1 || return

    echo -en "  Changing cava theme........................."

    [ -f $HOME/.config/cava/config ] && rm $HOME/.config/cava/config

    if  [[ ! -f $DIR/themes/$1/cava/config ]]; then
        echo -e "\E[1;33mSKIP\033[0m"
        return
    fi

    mkdir -p $HOME/.config/cava
    envsubst < $DIR/themes/$1/cava/config > $HOME/.config/cava/config
    killall dunst > /dev/null 2>&1

    echo -e "\E[1;32mDONE\033[0m"
}

# ---
# Updates the dunst configuration.
#
# @param $1 The theme name.
# ---
function updateDunst() {
    command -v dunstify > /dev/null 2>&1 || return

    echo -en "  Changing dunst theme........................"

    [ -f $HOME/.config/dunst/dunstrc ] && rm $HOME/.config/dunst/dunstrc

    if  [[ ! -f $DIR/themes/$1/dunst/dunstrc ]]; then
        echo -e "\E[1;33mSKIP\033[0m"
        return
    fi

    mkdir -p $HOME/.config/dunst
    envsubst < $DIR/themes/$1/dunst/dunstrc > $HOME/.config/dunst/dunstrc
    killall dunst > /dev/null 2>&1

    echo -e "\E[1;32mDONE\033[0m"
}

# ---
# Changes the hyprland theme.
#
# @param $1 The theme name.
# ---
function updateHyprland() {
    command -v hyprctl > /dev/null 2>&1 || return

    echo -en "  Changing hyprland theme....................."

    if [[ ! -f $DIR/themes/$1/hypr/theme.conf ]]; then
        echo -e "\E[1;33mSKIP\033[0m"
        return
    fi

    mkdir -p $HOME/.config/hypr
    envsubst < $DIR/themes/$1/hypr/theme.conf > $HOME/.config/hypr/theme.conf

    hyprctl reload > /dev/null

    echo -e "\E[1;32mDONE\033[0m"
}

# ---
# Changes the kitty theme.
#
# @param $1 The theme name.
# ---
function updateKitty() {
    command -v kitty > /dev/null 2>&1 || return

    echo -en "  Changing kitty theme........................"

    [ -f $HOME/.config/kitty/kitty.conf ] && rm $HOME/.config/kitty/kitty.conf

    if [[ ! -f $DIR/themes/$1/kitty/kitty.conf ]]; then
        echo -e "\E[1;33mSKIP\033[0m"
        return
    fi

    mkdir -p $HOME/.config/kitty
    envsubst < $DIR/themes/$1/kitty/kitty.conf > $HOME/.config/kitty/kitty.conf

    if [[ -x `command -v xdotool` ]]; then
        xdotool key 'ctrl+shift+F5'
    fi

    echo -e "\E[1;32mDONE\033[0m"
}

# ---
# Updates the mutt theme.
#
# @param $1 The theme name.
# ---
function updateMutt() {
    command -v neomutt > /dev/null 2>&1 || return

    echo -en "  Changing mutt theme........................."

    [ -f $HOME/.config/mutt/theme ] && rm $HOME/.config/mutt/theme

    if [[ ! -f $DIR/themes/$1/mutt/config ]]; then
        echo -e "\E[1;33mSKIP\033[0m"
        return
    fi

    mkdir -p $HOME/.config/mutt
    envsubst < $DIR/themes/$1/mutt/config > $HOME/.config/mutt/theme
    sed -i -e "/^source.*theme$/d" $(readlink -f $HOME/.muttrc)
    echo "source ~/.config/mutt/theme" >> $HOME/.muttrc

    echo -e "\E[1;32mDONE\033[0m"
}

# ---
# Updates the picom configuration.
#
# @param $1 The theme name.
# ---
function updatePicom() {
    command -v picom > /dev/null 2>&1 || return

    echo -en "  Changing picom config......................."

    [ -f $HOME/.config/picom/picom.conf ] && rm $HOME/.config/picom/picom.conf
    killall picom > /dev/null 2>&1

    if  [[ ! -f $DIR/themes/$1/picom/picom.conf ]]; then
        echo -e "\E[1;33mSKIP\033[0m"
        return
    fi

    mkdir -p $HOME/.config/picom
    cp $DIR/themes/$1/picom/picom.conf $HOME/.config/picom/picom.conf
    picom > /dev/null 2>&1 &

    echo -e "\E[1;32mDONE\033[0m"
}

# ---
# Changes the polybar theme.
#
# @param $1 The theme name.
# ---
function updatePolybar() {
    command -v polybar > /dev/null 2>&1 || return

    echo -en "  Changing polybar theme......................"

    [ -f $HOME/.config/polybar/config ] && rm $HOME/.config/polybar/config

    if [[ ! -f $DIR/themes/$1/polybar/config ]]; then
        echo -e "\E[1;33mSKIP\033[0m"
        return
    fi

    mkdir -p $HOME/.config/polybar
    envsubst < $DIR/themes/$1/polybar/config > $HOME/.config/polybar/config

    bars=$(grep "\[bar/.*\]" $HOME/.config/polybar/config | \
        sed -e "s/\[bar\/\(.*\)\]/\1/g")

    killall polybar > /dev/null 2>&1

    for bar in $bars; do
        polybar $bar > /tmp/polybar-$bar.log 2>&1 &
    done

    for m in `mons | grep "enabled" | sed -e "s/\s\+/ /g" | cut -d ' ' -f2`; do
        bspc config -m $m top_padding 0
        bspc config -m $m bottom_padding 0
    done

    # Fix top padding for primary monitor
    if [ $(grep "bar/top" ~/.config/polybar/config) ]; then
        height=$(grep "bar/top" ~/.config/polybar/config -A 3 | \
            grep "height" | sed -e "s/height\s*=\s*//g")
        border=$(grep "bar/top" ~/.config/polybar/config -A 3 | \
            grep "border-size" | sed -e "s/border-size\s*=\s*//g")

        bspc config -m $PRIMARY top_padding $(($height + $border * 2))
    fi

    # Fix bottom padding for primary monitor
    if [ $(grep "bar/bottom" ~/.config/polybar/config) ]; then
        height=$(grep "bar/bottom" ~/.config/polybar/config -A 3 | \
            grep "height" | sed -e "s/height\s*=\s*//g")
        border=$(grep "bar/bottom" ~/.config/polybar/config -A 3 | \
            grep "border-size" | sed -e "s/border-size\s*=\s*//g")

        bspc config -m $PRIMARY bottom_padding $(($height + $border * 2))
    fi

    echo -e "\E[1;32mDONE\033[0m"
}

# ---
# Changes the rofi theme.
#
# @param $1 The theme name.
# ---
function updateRofi() {
    command -v rofi > /dev/null 2>&1 || return

    echo -en "  Changing rofi theme........................."

    mkdir -p $HOME/.config/rofi

    for file in $(ls $DIR/themes/$1/rofi); do
        [ -f $HOME/.config/rofi/$file ] && rm $HOME/.config/rofi/$file

        envsubst < $DIR/themes/$1/rofi/$file > $HOME/.config/rofi/$file
    done

    echo -e "\E[1;32mDONE\033[0m"
}

# ---
# Changes the tmux theme.
#
# @param $1 The theme name.
# ---
function updateTmux() {
    command -v tmux > /dev/null 2>&1 || return

    echo -en "  Changing tmux theme........................."

    [ -f $HOME/.config/tmux/theme.conf ] && rm $HOME/.config/tmux/theme.conf

    if [[ ! -f $DIR/themes/$1/tmux/theme.conf ]]; then
        echo -e "\E[1;33mSKIP\033[0m"
        return
    fi

    mkdir -p $HOME/.config/tmux
    envsubst < $DIR/themes/$1/tmux/theme.conf > $HOME/.config/tmux/theme.conf

    if [[ `ps aux | grep tmux | tail -n +2` ]]; then
        tmux source-file $HOME/.config/tmux/theme.conf
    fi

    echo -e "\E[1;32mDONE\033[0m"
}

# ---
# Changes the vim colorschemes.
#
# @param $1 The theme name.
# ---
function updateVim() {
    if [[ ! -x `command -v vim` ]] && [[ ! -x `command -v nvim` ]]; then
        return
    fi

    echo -en "  Changing vim theme.........................."

    [ -f $HOME/.config/nvim/themer.vim ] && rm $HOME/.config/nvim/themer.vim

    if [[ ! -f $DIR/themes/$1/vim/theme.vim ]]; then
        echo -e "\E[1;33mSKIP\033[0m"
        return
    fi

    mkdir -p $HOME/.config/nvim
    cat $DIR/src/vim/themer.vim > $HOME/.config/nvim/themer.vim

    if [[ -f $DIR/themes/$1/vim/theme.vim ]]; then
        mkdir -p $HOME/.config/nvim/themes
        envsubst < $DIR/themes/$1/vim/theme.vim > $HOME/.config/nvim/themes/$1.vim
        echo "source ~/.config/nvim/themes/$1.vim" >> $HOME/.config/nvim/themer.vim
    fi

    if [[ -f $DIR/themes/$1/vim/colorscheme.vim ]]; then
        if [[ ! -d $HOME/.config/nvim/colors ]]; then
            mkdir -p $HOME/.config/nvim/colors
        fi

        cp $DIR/themes/$1/vim/colorscheme.vim $HOME/.config/nvim/colors/$1.vim
        echo "colorscheme $1" >> $HOME/.config/nvim/themer.vim
    fi

    if [[ -f $DIR/themes/$1/vim/lightline.vim ]]; then
        if [[ ! -d $HOME/.config/nvim/autoload/lightline/colorscheme ]]; then
            mkdir -p $HOME/.config/nvim/autoload/lightline/colorscheme
        fi

        cp $DIR/themes/$1/vim/lightline.vim $HOME/.config/nvim/autoload/lightline/colorscheme/$1.vim
        echo "source ~/.config/nvim/autoload/lightline/colorscheme/$1.vim" >> $HOME/.config/nvim/themer.vim
    fi

    echo -e "\E[1;32mDONE\033[0m"
}

# ---
# Changes the current wallpaper.
#
# @param $1 The theme name.
# @param $2 The color name
# ---
function updateWallpaper() {
    #if [[ ! -x `command -v feh` ]] || \
            #[[ ! -d $DIR/wallpapers/$1  ]] || \
            #[[ ! `ls $DIR/wallpapers/$1 | grep ".*\.\(png\|jpg\)"` ]]; then
        #return
    #fi

    echo -en "  Changing wallpaper.........................."

    WALLPAPER=`ls $DIR/wallpapers/$2 | grep ".*\.\(png\|jpg\)"`
    ARGS=''
    LOCK=''
    i=0

    for w in $WALLPAPER; do
        ARGS="$DIR/wallpapers/$2/$w"

        if [ $i -eq 0 ]; then
            LOCK="$DIR/wallpapers/$2/$w"
        fi

        i=$(($i+1))
    done

    export wallpaper="$ARGS"
    envsubst < $DIR/themes/$1/hypr/hyprpaper.conf > $HOME/.config/hypr/hyprpaper.conf
    #feh $ARGS > /dev/null 2>&1
    #betterlockscreen -u $LOCK --blur 3 > /dev/null 2>&1

    killall hyprpaper > /dev/null 2>&1

    hyprpaper > /dev/null 2>&1 &

    echo -e "\E[1;32mDONE\033[0m"
}

# ---
# Changes the waybar theme.
#
# @param $1 The theme name.
# ---
function updateWaybar() {
    command -v waybar > /dev/null 2>&1 || return

    echo -en "  Changing waybar theme......................."

    [ -f $HOME/.config/waybar ] && rm $HOME/.config/waybar

    if [[ ! -d $DIR/themes/$1/waybar ]]; then
        echo -e "\E[1;33mSKIP\033[0m"
        return
    fi

    mkdir -p $HOME/.config/waybar
    envsubst < $DIR/themes/$1/waybar/config > $HOME/.config/waybar/config
    envsubst < $DIR/themes/$1/waybar/style.css > $HOME/.config/waybar/style.css

    killall waybar > /dev/null 2>&1


    waybar > /dev/null 2>&1 &

    echo -e "\E[1;32mDONE\033[0m"
}

# ---
# Changes the zsh theme.
#
# @param $1 The theme name.
# ---
function updateZsh() {
    command -v zsh > /dev/null 2>&1 || return

    echo -en "  Changing zsh theme.........................."

    [ -f $HOME/.config/zsh/config/environments/theme.sh ] && rm $HOME/.config/zsh/config/environments/theme.sh

    if [[ ! -f $DIR/themes/$1/zsh/theme.sh ]]; then
        echo -e "\E[1;33mSKIP\033[0m"
        return
    fi

    mkdir -p $HOME/.config/zsh/config/environments
    cp $DIR/themes/$1/zsh/theme.sh $HOME/.config/zsh/config/environments/theme.sh

    echo -e "\E[1;32mDONE\033[0m"
}

main "$@"
